{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _mergeClassNames = require('merge-class-names');\n\nvar _mergeClassNames2 = _interopRequireDefault(_mergeClassNames);\n\nvar _PageCanvas = require('./Page/PageCanvas');\n\nvar _PageCanvas2 = _interopRequireDefault(_PageCanvas);\n\nvar _PageSVG = require('./Page/PageSVG');\n\nvar _PageSVG2 = _interopRequireDefault(_PageSVG);\n\nvar _TextLayer = require('./Page/TextLayer');\n\nvar _TextLayer2 = _interopRequireDefault(_TextLayer);\n\nvar _AnnotationLayer = require('./Page/AnnotationLayer');\n\nvar _AnnotationLayer2 = _interopRequireDefault(_AnnotationLayer);\n\nvar _utils = require('./shared/utils');\n\nvar _events = require('./shared/events');\n\nvar _propTypes3 = require('./shared/propTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Page = function (_Component) {\n  (0, _inherits3.default)(Page, _Component);\n\n  function Page() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Page);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Page.__proto__ || (0, _getPrototypeOf2.default)(Page)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      page: null\n    }, _this.onLoadSuccess = function (page) {\n      _this.setState({\n        page: page\n      }, function () {\n        (0, _utils.callIfDefined)(_this.props.onLoadSuccess, (0, _utils.makePageCallback)(page, _this.scale));\n        (0, _utils.callIfDefined)(_this.context.registerPage, page.pageIndex, _this.ref);\n      });\n    }, _this.onLoadError = function (error) {\n      if (error.name === 'RenderingCancelledException' || error.name === 'PromiseCancelledException') {\n        return;\n      }\n\n      (0, _utils.errorOnDev)(error.message, error);\n      (0, _utils.callIfDefined)(_this.props.onLoadError, error);\n\n      _this.setState({\n        page: false\n      });\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Page, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.loadPage();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (this.getPdf(nextProps, nextContext) !== this.getPdf() || this.getPageNumber(nextProps) !== this.getPageNumber()) {\n        (0, _utils.callIfDefined)(this.context.unregisterPage, this.pageIndex);\n\n        if (this.state.page !== null) {\n          this.setState({\n            page: null\n          });\n        }\n\n        this.loadPage(nextProps, nextContext);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      (0, _utils.callIfDefined)(this.context.unregisterPage, this.pageIndex);\n      (0, _utils.cancelRunningTask)(this.runningTask);\n    }\n  }, {\n    key: 'getPdf',\n    value: function getPdf() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;\n      return props.pdf || context.pdf;\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      if (!this.state.page) {\n        return {};\n      }\n\n      var context = {\n        page: this.state.page,\n        pdf: this.getPdf(),\n        rotate: this.rotate,\n        scale: this.scale\n      };\n\n      if (this.props.onRenderError) {\n        context.onRenderError = this.props.onRenderError;\n      }\n\n      if (this.props.onRenderSuccess) {\n        context.onRenderSuccess = this.props.onRenderSuccess;\n      }\n\n      if (this.props.onGetAnnotationsError) {\n        context.onGetAnnotationsError = this.props.onGetAnnotationsError;\n      }\n\n      if (this.props.onGetAnnotationsSuccess) {\n        context.onGetAnnotationsSuccess = this.props.onGetAnnotationsSuccess;\n      }\n\n      if (this.props.onGetTextError) {\n        context.onGetTextError = this.props.onGetTextError;\n      }\n\n      if (this.props.onGetTextSuccess) {\n        context.onGetTextSuccess = this.props.onGetTextSuccess;\n      }\n\n      if (this.props.customTextRenderer) {\n        context.customTextRenderer = this.props.customTextRenderer;\n      }\n\n      return context;\n    }\n    /**\n     * Called when a page is loaded successfully\n     */\n\n    /**\n     * Called when a page failed to load\n     */\n\n  }, {\n    key: 'getPageIndex',\n    value: function getPageIndex() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if ((0, _utils.isProvided)(props.pageNumber)) {\n        return props.pageNumber - 1;\n      }\n\n      if ((0, _utils.isProvided)(props.pageIndex)) {\n        return props.pageIndex;\n      }\n\n      return null;\n    }\n  }, {\n    key: 'getPageNumber',\n    value: function getPageNumber() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if ((0, _utils.isProvided)(props.pageNumber)) {\n        return props.pageNumber;\n      }\n\n      if ((0, _utils.isProvided)(props.pageIndex)) {\n        return props.pageIndex + 1;\n      }\n\n      return null;\n    }\n  }, {\n    key: 'loadPage',\n    value: function loadPage() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;\n      var pdf = this.getPdf(props, context);\n\n      if (!pdf) {\n        throw new Error('Attempted to load a page, but no document was specified.');\n      }\n\n      var pageNumber = this.getPageNumber(props);\n\n      if (!pageNumber) {\n        return null;\n      }\n\n      this.runningTask = (0, _utils.makeCancellable)(pdf.getPage(pageNumber));\n      return this.runningTask.promise.then(this.onLoadSuccess).catch(this.onLoadError);\n    }\n  }, {\n    key: 'renderTextLayer',\n    value: function renderTextLayer() {\n      var renderTextLayer = this.props.renderTextLayer;\n\n      if (!renderTextLayer) {\n        return null;\n      }\n\n      return _react2.default.createElement(_TextLayer2.default, {\n        key: this.pageKey + '_text'\n      });\n    }\n  }, {\n    key: 'renderAnnotations',\n    value: function renderAnnotations() {\n      var renderAnnotations = this.props.renderAnnotations;\n\n      if (!renderAnnotations) {\n        return null;\n      }\n\n      return _react2.default.createElement(_AnnotationLayer2.default, {\n        key: this.pageKey + '_annotations'\n      });\n    }\n  }, {\n    key: 'renderSVG',\n    value: function renderSVG() {\n      return [_react2.default.createElement(_PageSVG2.default, {\n        key: this.pageKeyNoScale + '_svg'\n      }),\n      /**\n       * As of now, PDF.js 2.0.120 returns warnings on unimplemented annotations.\n       * Therefore, as a fallback, we render \"traditional\" AnnotationLayer component.\n       */\n      this.renderAnnotations()];\n    }\n  }, {\n    key: 'renderCanvas',\n    value: function renderCanvas() {\n      return [_react2.default.createElement(_PageCanvas2.default, {\n        key: this.pageKey + '_canvas'\n      }), this.renderTextLayer(), this.renderAnnotations()];\n    }\n  }, {\n    key: 'renderNoData',\n    value: function renderNoData() {\n      return _react2.default.createElement('div', {\n        className: 'react-pdf__message react-pdf__message--no-data'\n      }, this.props.noData);\n    }\n  }, {\n    key: 'renderError',\n    value: function renderError() {\n      return _react2.default.createElement('div', {\n        className: 'react-pdf__message react-pdf__message--error'\n      }, this.props.error);\n    }\n  }, {\n    key: 'renderLoader',\n    value: function renderLoader() {\n      return _react2.default.createElement('div', {\n        className: 'react-pdf__message react-pdf__message--loading'\n      }, this.props.loading);\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren() {\n      var _props = this.props,\n          children = _props.children,\n          renderMode = _props.renderMode;\n      return [renderMode === 'svg' ? this.renderSVG() : this.renderCanvas(), children];\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var pageNumber = this.pageNumber;\n      var pdf = this.getPdf();\n      var className = this.props.className;\n      var page = this.state.page;\n      var content = void 0;\n\n      if (!pageNumber) {\n        content = this.renderNoData();\n      } else if (pdf === null || page === null) {\n        content = this.renderLoader();\n      } else if (pdf === false || page === false) {\n        content = this.renderError();\n      } else {\n        content = this.renderChildren();\n      }\n\n      return _react2.default.createElement('div', (0, _extends3.default)({\n        className: (0, _mergeClassNames2.default)('react-pdf__Page', className),\n        ref: function ref(_ref2) {\n          var inputRef = _this2.props.inputRef;\n\n          if (inputRef) {\n            inputRef(_ref2);\n          }\n\n          _this2.ref = _ref2;\n        },\n        style: {\n          position: 'relative'\n        },\n        'data-page-number': pageNumber\n      }, this.eventProps), content);\n    }\n  }, {\n    key: 'pageIndex',\n    get: function get() {\n      return this.getPageIndex();\n    }\n  }, {\n    key: 'pageNumber',\n    get: function get() {\n      return this.getPageNumber();\n    }\n  }, {\n    key: 'rotate',\n    get: function get() {\n      if ((0, _utils.isProvided)(this.props.rotate)) {\n        return this.props.rotate;\n      }\n\n      if ((0, _utils.isProvided)(this.context.rotate)) {\n        return this.context.rotate;\n      }\n\n      var page = this.state.page;\n      return page.rotate;\n    }\n  }, {\n    key: 'scale',\n    get: function get() {\n      var _props2 = this.props,\n          scale = _props2.scale,\n          width = _props2.width;\n      var page = this.state.page;\n      var rotate = this.rotate; // Be default, we'll render page at 100% * scale width.\n\n      var pageScale = 1; // If width is defined, calculate the scale of the page so it could be of desired width.\n\n      if (width) {\n        var viewport = page.getViewport(scale, rotate);\n        pageScale = width / viewport.width;\n      }\n\n      return scale * pageScale;\n    }\n  }, {\n    key: 'eventProps',\n    get: function get() {\n      var _this3 = this;\n\n      return (0, _events.makeEventProps)(this.props, function () {\n        var page = _this3.state.page;\n        return (0, _utils.makePageCallback)(page, _this3.scale);\n      });\n    }\n  }, {\n    key: 'pageKey',\n    get: function get() {\n      return this.state.page.pageIndex + '@' + this.scale + '/' + this.rotate;\n    }\n  }, {\n    key: 'pageKeyNoScale',\n    get: function get() {\n      return this.state.page.pageIndex + '/' + this.rotate;\n    }\n  }, {\n    key: 'pageProps',\n    get: function get() {\n      return {\n        page: this.state.page,\n        rotate: this.rotate,\n        scale: this.scale\n      };\n    }\n  }]);\n  return Page;\n}(_react.Component);\n\nexports.default = Page;\nPage.defaultProps = {\n  error: 'Failed to load the page.',\n  loading: 'Loading page…',\n  noData: 'No page specified.',\n  renderAnnotations: true,\n  renderMode: 'canvas',\n  renderTextLayer: true,\n  scale: 1.0\n};\nPage.childContextTypes = {\n  customTextRenderer: _propTypes2.default.func,\n  onGetTextError: _propTypes2.default.func,\n  onGetTextSuccess: _propTypes2.default.func,\n  onRenderError: _propTypes2.default.func,\n  onRenderSuccess: _propTypes2.default.func,\n  page: _propTypes3.isPage,\n  pdf: _propTypes3.isPdf,\n  rotate: _propTypes3.isRotate,\n  scale: _propTypes2.default.number\n};\nPage.contextTypes = {\n  linkService: _propTypes3.isLinkService,\n  pdf: _propTypes3.isPdf,\n  registerPage: _propTypes2.default.func,\n  rotate: _propTypes3.isRotate,\n  unregisterPage: _propTypes2.default.func\n};\nPage.propTypes = (0, _extends3.default)({\n  children: _propTypes2.default.node,\n  className: _propTypes3.isClassName,\n  customTextRenderer: _propTypes2.default.func,\n  error: _propTypes2.default.string,\n  inputRef: _propTypes2.default.func,\n  loading: _propTypes2.default.string,\n  noData: _propTypes2.default.node,\n  onGetTextError: _propTypes2.default.func,\n  onGetTextSuccess: _propTypes2.default.func,\n  onLoadError: _propTypes2.default.func,\n  onLoadSuccess: _propTypes2.default.func,\n  onRenderError: _propTypes2.default.func,\n  onRenderSuccess: _propTypes2.default.func,\n  pageIndex: _propTypes3.isPageIndex,\n  pageNumber: _propTypes3.isPageNumber,\n  renderAnnotations: _propTypes2.default.bool,\n  renderMode: _propTypes2.default.oneOf(['canvas', 'svg']),\n  renderTextLayer: _propTypes2.default.bool,\n  rotate: _propTypes3.isRotate,\n  scale: _propTypes2.default.number,\n  width: _propTypes2.default.number\n}, (0, _propTypes3.eventsProps)());","map":null,"metadata":{},"sourceType":"script"}