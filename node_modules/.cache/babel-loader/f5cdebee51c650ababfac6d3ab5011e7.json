{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nif (typeof PDFJS === 'undefined' || !PDFJS.compatibilityChecked) {\n  var globalScope = require('./global_scope');\n\n  var isNodeJS = require('./is_node');\n\n  var userAgent = typeof navigator !== 'undefined' && navigator.userAgent || '';\n  var isAndroid = /Android/.test(userAgent);\n  var isIOSChrome = userAgent.indexOf('CriOS') >= 0;\n  var isIE = userAgent.indexOf('Trident') >= 0;\n  var isIOS = /\\b(iPad|iPhone|iPod)(?=;)/.test(userAgent);\n  var isSafari = /Safari\\//.test(userAgent) && !/(Chrome\\/|Android\\s)/.test(userAgent);\n  var hasDOM = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object';\n\n  if (typeof PDFJS === 'undefined') {\n    globalScope.PDFJS = {};\n  }\n\n  PDFJS.compatibilityChecked = true;\n\n  (function checkNodeBtoa() {\n    if (globalScope.btoa || !isNodeJS()) {\n      return;\n    }\n\n    globalScope.btoa = function (chars) {\n      return Buffer.from(chars, 'binary').toString('base64');\n    };\n  })();\n\n  (function checkNodeAtob() {\n    if (globalScope.atob || !isNodeJS()) {\n      return;\n    }\n\n    globalScope.atob = function (input) {\n      return Buffer.from(input, 'base64').toString('binary');\n    };\n  })();\n\n  (function checkOnBlobSupport() {\n    if (isIE || isIOSChrome) {\n      PDFJS.disableCreateObjectURL = true;\n    }\n  })();\n\n  (function checkNavigatorLanguage() {\n    if (typeof navigator === 'undefined') {\n      return;\n    }\n\n    if ('language' in navigator) {\n      return;\n    }\n\n    PDFJS.locale = navigator.userLanguage || 'en-US';\n  })();\n\n  (function checkRangeRequests() {\n    if (isSafari || isIOS) {\n      PDFJS.disableRange = true;\n      PDFJS.disableStream = true;\n    }\n  })();\n\n  (function checkCanvasSizeLimitation() {\n    if (isIOS || isAndroid) {\n      PDFJS.maxCanvasPixels = 5242880;\n    }\n  })();\n\n  (function checkFullscreenSupport() {\n    if (!hasDOM) {\n      return;\n    }\n\n    if (isIE && window.parent !== window) {\n      PDFJS.disableFullscreen = true;\n    }\n  })();\n\n  (function checkCurrentScript() {\n    if (!hasDOM) {\n      return;\n    }\n\n    if ('currentScript' in document) {\n      return;\n    }\n\n    Object.defineProperty(document, 'currentScript', {\n      get: function get() {\n        var scripts = document.getElementsByTagName('script');\n        return scripts[scripts.length - 1];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  })();\n\n  (function checkChildNodeRemove() {\n    if (!hasDOM) {\n      return;\n    }\n\n    if (typeof Element.prototype.remove !== 'undefined') {\n      return;\n    }\n\n    Element.prototype.remove = function () {\n      if (this.parentNode) {\n        this.parentNode.removeChild(this);\n      }\n    };\n  })();\n\n  (function checkArrayIncludes() {\n    if (Array.prototype.includes) {\n      return;\n    }\n\n    Array.prototype.includes = require('core-js/fn/array/includes');\n  })();\n\n  (function checkMathLog2() {\n    if (Math.log2) {\n      return;\n    }\n\n    Math.log2 = require('core-js/fn/math/log2');\n  })();\n\n  (function checkNumberIsNaN() {\n    if (Number.isNaN) {\n      return;\n    }\n\n    Number.isNaN = require('core-js/fn/number/is-nan');\n  })();\n\n  (function checkNumberIsInteger() {\n    if (Number.isInteger) {\n      return;\n    }\n\n    Number.isInteger = require('core-js/fn/number/is-integer');\n  })();\n\n  (function checkPromise() {\n    if (globalScope.Promise) {\n      return;\n    }\n\n    globalScope.Promise = require('core-js/fn/promise');\n  })();\n\n  (function checkWeakMap() {\n    if (globalScope.WeakMap) {\n      return;\n    }\n\n    globalScope.WeakMap = require('core-js/fn/weak-map');\n  })();\n\n  (function checkURLConstructor() {\n    var hasWorkingUrl = false;\n\n    try {\n      if (typeof URL === 'function' && _typeof(URL.prototype) === 'object' && 'origin' in URL.prototype) {\n        var u = new URL('b', 'http://a');\n        u.pathname = 'c%20d';\n        hasWorkingUrl = u.href === 'http://a/c%20d';\n      }\n    } catch (e) {}\n\n    if (hasWorkingUrl) {\n      return;\n    }\n\n    var relative = Object.create(null);\n    relative['ftp'] = 21;\n    relative['file'] = 0;\n    relative['gopher'] = 70;\n    relative['http'] = 80;\n    relative['https'] = 443;\n    relative['ws'] = 80;\n    relative['wss'] = 443;\n    var relativePathDotMapping = Object.create(null);\n    relativePathDotMapping['%2e'] = '.';\n    relativePathDotMapping['.%2e'] = '..';\n    relativePathDotMapping['%2e.'] = '..';\n    relativePathDotMapping['%2e%2e'] = '..';\n\n    function isRelativeScheme(scheme) {\n      return relative[scheme] !== undefined;\n    }\n\n    function invalid() {\n      clear.call(this);\n      this._isInvalid = true;\n    }\n\n    function IDNAToASCII(h) {\n      if (h === '') {\n        invalid.call(this);\n      }\n\n      return h.toLowerCase();\n    }\n\n    function percentEscape(c) {\n      var unicode = c.charCodeAt(0);\n\n      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1) {\n        return c;\n      }\n\n      return encodeURIComponent(c);\n    }\n\n    function percentEscapeQuery(c) {\n      var unicode = c.charCodeAt(0);\n\n      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1) {\n        return c;\n      }\n\n      return encodeURIComponent(c);\n    }\n\n    var EOF,\n        ALPHA = /[a-zA-Z]/,\n        ALPHANUMERIC = /[a-zA-Z0-9\\+\\-\\.]/;\n\n    function parse(input, stateOverride, base) {\n      function err(message) {\n        errors.push(message);\n      }\n\n      var state = stateOverride || 'scheme start',\n          cursor = 0,\n          buffer = '',\n          seenAt = false,\n          seenBracket = false,\n          errors = [];\n\n      loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n        var c = input[cursor];\n\n        switch (state) {\n          case 'scheme start':\n            if (c && ALPHA.test(c)) {\n              buffer += c.toLowerCase();\n              state = 'scheme';\n            } else if (!stateOverride) {\n              buffer = '';\n              state = 'no scheme';\n              continue;\n            } else {\n              err('Invalid scheme.');\n              break loop;\n            }\n\n            break;\n\n          case 'scheme':\n            if (c && ALPHANUMERIC.test(c)) {\n              buffer += c.toLowerCase();\n            } else if (c === ':') {\n              this._scheme = buffer;\n              buffer = '';\n\n              if (stateOverride) {\n                break loop;\n              }\n\n              if (isRelativeScheme(this._scheme)) {\n                this._isRelative = true;\n              }\n\n              if (this._scheme === 'file') {\n                state = 'relative';\n              } else if (this._isRelative && base && base._scheme === this._scheme) {\n                state = 'relative or authority';\n              } else if (this._isRelative) {\n                state = 'authority first slash';\n              } else {\n                state = 'scheme data';\n              }\n            } else if (!stateOverride) {\n              buffer = '';\n              cursor = 0;\n              state = 'no scheme';\n              continue;\n            } else if (c === EOF) {\n              break loop;\n            } else {\n              err('Code point not allowed in scheme: ' + c);\n              break loop;\n            }\n\n            break;\n\n          case 'scheme data':\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            } else {\n              if (c !== EOF && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n                this._schemeData += percentEscape(c);\n              }\n            }\n\n            break;\n\n          case 'no scheme':\n            if (!base || !isRelativeScheme(base._scheme)) {\n              err('Missing scheme.');\n              invalid.call(this);\n            } else {\n              state = 'relative';\n              continue;\n            }\n\n            break;\n\n          case 'relative or authority':\n            if (c === '/' && input[cursor + 1] === '/') {\n              state = 'authority ignore slashes';\n            } else {\n              err('Expected /, got: ' + c);\n              state = 'relative';\n              continue;\n            }\n\n            break;\n\n          case 'relative':\n            this._isRelative = true;\n\n            if (this._scheme !== 'file') {\n              this._scheme = base._scheme;\n            }\n\n            if (c === EOF) {\n              this._host = base._host;\n              this._port = base._port;\n              this._path = base._path.slice();\n              this._query = base._query;\n              this._username = base._username;\n              this._password = base._password;\n              break loop;\n            } else if (c === '/' || c === '\\\\') {\n              if (c === '\\\\') {\n                err('\\\\ is an invalid code point.');\n              }\n\n              state = 'relative slash';\n            } else if (c === '?') {\n              this._host = base._host;\n              this._port = base._port;\n              this._path = base._path.slice();\n              this._query = '?';\n              this._username = base._username;\n              this._password = base._password;\n              state = 'query';\n            } else if (c === '#') {\n              this._host = base._host;\n              this._port = base._port;\n              this._path = base._path.slice();\n              this._query = base._query;\n              this._fragment = '#';\n              this._username = base._username;\n              this._password = base._password;\n              state = 'fragment';\n            } else {\n              var nextC = input[cursor + 1];\n              var nextNextC = input[cursor + 2];\n\n              if (this._scheme !== 'file' || !ALPHA.test(c) || nextC !== ':' && nextC !== '|' || nextNextC !== EOF && nextNextC !== '/' && nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#') {\n                this._host = base._host;\n                this._port = base._port;\n                this._username = base._username;\n                this._password = base._password;\n                this._path = base._path.slice();\n\n                this._path.pop();\n              }\n\n              state = 'relative path';\n              continue;\n            }\n\n            break;\n\n          case 'relative slash':\n            if (c === '/' || c === '\\\\') {\n              if (c === '\\\\') {\n                err('\\\\ is an invalid code point.');\n              }\n\n              if (this._scheme === 'file') {\n                state = 'file host';\n              } else {\n                state = 'authority ignore slashes';\n              }\n            } else {\n              if (this._scheme !== 'file') {\n                this._host = base._host;\n                this._port = base._port;\n                this._username = base._username;\n                this._password = base._password;\n              }\n\n              state = 'relative path';\n              continue;\n            }\n\n            break;\n\n          case 'authority first slash':\n            if (c === '/') {\n              state = 'authority second slash';\n            } else {\n              err('Expected \\'/\\', got: ' + c);\n              state = 'authority ignore slashes';\n              continue;\n            }\n\n            break;\n\n          case 'authority second slash':\n            state = 'authority ignore slashes';\n\n            if (c !== '/') {\n              err('Expected \\'/\\', got: ' + c);\n              continue;\n            }\n\n            break;\n\n          case 'authority ignore slashes':\n            if (c !== '/' && c !== '\\\\') {\n              state = 'authority';\n              continue;\n            } else {\n              err('Expected authority, got: ' + c);\n            }\n\n            break;\n\n          case 'authority':\n            if (c === '@') {\n              if (seenAt) {\n                err('@ already seen.');\n                buffer += '%40';\n              }\n\n              seenAt = true;\n\n              for (var i = 0; i < buffer.length; i++) {\n                var cp = buffer[i];\n\n                if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                  err('Invalid whitespace in authority.');\n                  continue;\n                }\n\n                if (cp === ':' && this._password === null) {\n                  this._password = '';\n                  continue;\n                }\n\n                var tempC = percentEscape(cp);\n\n                if (this._password !== null) {\n                  this._password += tempC;\n                } else {\n                  this._username += tempC;\n                }\n              }\n\n              buffer = '';\n            } else if (c === EOF || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n              cursor -= buffer.length;\n              buffer = '';\n              state = 'host';\n              continue;\n            } else {\n              buffer += c;\n            }\n\n            break;\n\n          case 'file host':\n            if (c === EOF || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n              if (buffer.length === 2 && ALPHA.test(buffer[0]) && (buffer[1] === ':' || buffer[1] === '|')) {\n                state = 'relative path';\n              } else if (buffer.length === 0) {\n                state = 'relative path start';\n              } else {\n                this._host = IDNAToASCII.call(this, buffer);\n                buffer = '';\n                state = 'relative path start';\n              }\n\n              continue;\n            } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n              err('Invalid whitespace in file host.');\n            } else {\n              buffer += c;\n            }\n\n            break;\n\n          case 'host':\n          case 'hostname':\n            if (c === ':' && !seenBracket) {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'port';\n\n              if (stateOverride === 'hostname') {\n                break loop;\n              }\n            } else if (c === EOF || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n\n              if (stateOverride) {\n                break loop;\n              }\n\n              continue;\n            } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n              if (c === '[') {\n                seenBracket = true;\n              } else if (c === ']') {\n                seenBracket = false;\n              }\n\n              buffer += c;\n            } else {\n              err('Invalid code point in host/hostname: ' + c);\n            }\n\n            break;\n\n          case 'port':\n            if (/[0-9]/.test(c)) {\n              buffer += c;\n            } else if (c === EOF || c === '/' || c === '\\\\' || c === '?' || c === '#' || stateOverride) {\n              if (buffer !== '') {\n                var temp = parseInt(buffer, 10);\n\n                if (temp !== relative[this._scheme]) {\n                  this._port = temp + '';\n                }\n\n                buffer = '';\n              }\n\n              if (stateOverride) {\n                break loop;\n              }\n\n              state = 'relative path start';\n              continue;\n            } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n              err('Invalid code point in port: ' + c);\n            } else {\n              invalid.call(this);\n            }\n\n            break;\n\n          case 'relative path start':\n            if (c === '\\\\') {\n              err('\\'\\\\\\' not allowed in path.');\n            }\n\n            state = 'relative path';\n\n            if (c !== '/' && c !== '\\\\') {\n              continue;\n            }\n\n            break;\n\n          case 'relative path':\n            if (c === EOF || c === '/' || c === '\\\\' || !stateOverride && (c === '?' || c === '#')) {\n              if (c === '\\\\') {\n                err('\\\\ not allowed in relative path.');\n              }\n\n              var tmp;\n\n              if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {\n                buffer = tmp;\n              }\n\n              if (buffer === '..') {\n                this._path.pop();\n\n                if (c !== '/' && c !== '\\\\') {\n                  this._path.push('');\n                }\n              } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              } else if (buffer !== '.') {\n                if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 && ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                  buffer = buffer[0] + ':';\n                }\n\n                this._path.push(buffer);\n              }\n\n              buffer = '';\n\n              if (c === '?') {\n                this._query = '?';\n                state = 'query';\n              } else if (c === '#') {\n                this._fragment = '#';\n                state = 'fragment';\n              }\n            } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n              buffer += percentEscape(c);\n            }\n\n            break;\n\n          case 'query':\n            if (!stateOverride && c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            } else if (c !== EOF && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n              this._query += percentEscapeQuery(c);\n            }\n\n            break;\n\n          case 'fragment':\n            if (c !== EOF && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n              this._fragment += c;\n            }\n\n            break;\n        }\n\n        cursor++;\n      }\n    }\n\n    function clear() {\n      this._scheme = '';\n      this._schemeData = '';\n      this._username = '';\n      this._password = null;\n      this._host = '';\n      this._port = '';\n      this._path = [];\n      this._query = '';\n      this._fragment = '';\n      this._isInvalid = false;\n      this._isRelative = false;\n    }\n\n    function JURL(url, base) {\n      if (base !== undefined && !(base instanceof JURL)) {\n        base = new JURL(String(base));\n      }\n\n      this._url = url;\n      clear.call(this);\n      var input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n      parse.call(this, input, null, base);\n    }\n\n    JURL.prototype = {\n      toString: function toString() {\n        return this.href;\n      },\n\n      get href() {\n        if (this._isInvalid) {\n          return this._url;\n        }\n\n        var authority = '';\n\n        if (this._username !== '' || this._password !== null) {\n          authority = this._username + (this._password !== null ? ':' + this._password : '') + '@';\n        }\n\n        return this.protocol + (this._isRelative ? '//' + authority + this.host : '') + this.pathname + this._query + this._fragment;\n      },\n\n      set href(value) {\n        clear.call(this);\n        parse.call(this, value);\n      },\n\n      get protocol() {\n        return this._scheme + ':';\n      },\n\n      set protocol(value) {\n        if (this._isInvalid) {\n          return;\n        }\n\n        parse.call(this, value + ':', 'scheme start');\n      },\n\n      get host() {\n        return this._isInvalid ? '' : this._port ? this._host + ':' + this._port : this._host;\n      },\n\n      set host(value) {\n        if (this._isInvalid || !this._isRelative) {\n          return;\n        }\n\n        parse.call(this, value, 'host');\n      },\n\n      get hostname() {\n        return this._host;\n      },\n\n      set hostname(value) {\n        if (this._isInvalid || !this._isRelative) {\n          return;\n        }\n\n        parse.call(this, value, 'hostname');\n      },\n\n      get port() {\n        return this._port;\n      },\n\n      set port(value) {\n        if (this._isInvalid || !this._isRelative) {\n          return;\n        }\n\n        parse.call(this, value, 'port');\n      },\n\n      get pathname() {\n        return this._isInvalid ? '' : this._isRelative ? '/' + this._path.join('/') : this._schemeData;\n      },\n\n      set pathname(value) {\n        if (this._isInvalid || !this._isRelative) {\n          return;\n        }\n\n        this._path = [];\n        parse.call(this, value, 'relative path start');\n      },\n\n      get search() {\n        return this._isInvalid || !this._query || this._query === '?' ? '' : this._query;\n      },\n\n      set search(value) {\n        if (this._isInvalid || !this._isRelative) {\n          return;\n        }\n\n        this._query = '?';\n\n        if (value[0] === '?') {\n          value = value.slice(1);\n        }\n\n        parse.call(this, value, 'query');\n      },\n\n      get hash() {\n        return this._isInvalid || !this._fragment || this._fragment === '#' ? '' : this._fragment;\n      },\n\n      set hash(value) {\n        if (this._isInvalid) {\n          return;\n        }\n\n        this._fragment = '#';\n\n        if (value[0] === '#') {\n          value = value.slice(1);\n        }\n\n        parse.call(this, value, 'fragment');\n      },\n\n      get origin() {\n        var host;\n\n        if (this._isInvalid || !this._scheme) {\n          return '';\n        }\n\n        switch (this._scheme) {\n          case 'data':\n          case 'file':\n          case 'javascript':\n          case 'mailto':\n            return 'null';\n\n          case 'blob':\n            try {\n              return new JURL(this._schemeData).origin || 'null';\n            } catch (_) {}\n\n            return 'null';\n        }\n\n        host = this.host;\n\n        if (!host) {\n          return '';\n        }\n\n        return this._scheme + '://' + host;\n      }\n\n    };\n    var OriginalURL = globalScope.URL;\n\n    if (OriginalURL) {\n      JURL.createObjectURL = function (blob) {\n        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);\n      };\n\n      JURL.revokeObjectURL = function (url) {\n        OriginalURL.revokeObjectURL(url);\n      };\n    }\n\n    globalScope.URL = JURL;\n  })();\n\n  (function checkObjectValues() {\n    if (Object.values) {\n      return;\n    }\n\n    Object.values = require('core-js/fn/object/values');\n  })();\n}","map":null,"metadata":{},"sourceType":"script"}